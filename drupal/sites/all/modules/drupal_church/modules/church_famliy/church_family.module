<?php

define("CHURCH_FAMILY_NO_STATUS",   -1);
define("CHURCH_FAMILY_NO_STATUS_LABEL",   'No Status');
define("CHURCH_FAMILY_MARRIED",     0);
define("CHURCH_FAMILY_MARRIED_LABEL",     'Married');
define("CHURCH_FAMILY_WIDOWED",     1);
define("CHURCH_FAMILY_WIDOWED_LABEL",     'Widowed');
define("CHURCH_FAMILY_DIVORCED",    2);
define("CHURCH_FAMILY_DIVORCED_LABEL",    'Divorced');
define("CHURCH_FAMILY_ENGAGED",     3);
define("CHURCH_FAMILY_ENGAGED_LABEL",     'Engaged');
define("CHURCH_FAMILY_PARTNERED",   4);
define("CHURCH_FAMILY_PARTNERED_LABEL",   'Partnered');

/**
 * Implements hook_entity_property_info_alter() on top of book module.
 * @see entity_metadata_entity_property_info_alter()
 */
function church_family_entity_property_info_alter(&$info) {
  // Add meta-data about the added node properties.
  $properties = &$info['church_people']['properties'];
  $properties['church_family_spouses'] = array(
    'label' => t("Spouses"),
    'description' => t("The spouses of a person."),
    'type' => 'list',
    'getter callback' => 'entity_property_church_people_church_family_spouses',
  );

  $properties['church_family_children'] = array(
    'label' => t("Children"),
    'description' => t("The children of a person."),
    'type' => 'list',
    'getter callback' => 'entity_property_church_people_church_family_children',
  );
}

function entity_property_church_people_church_family_spouses($data, array $options, $name, $type, $info) {
  if ( isset($data->church_family_spouses) ) {
    return $data->church_family_spouses;
  }
  else {
    return array();
  }
}

function entity_property_church_people_church_family_children($data, array $options, $name, $type, $info) {
  if ( isset($data->church_family_children) ) {
    return $data->church_family_children;
  }
  else {
    return array();
  }
}

function church_family_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'church_people_form') {

    //add validate and submit handlers
    $form['#validate'][] = '_church_people_form_family_validate';
    $form['actions']['submit']['#submit'][] = '_church_people_form_family_submit';

    if(!isset($form_state['howmany_spouses'])) {
      if($form['#entity']->church_family_spouses) $form_state['howmany_spouses'] = count((array)$form['#entity']->church_family_spouses) + 1;
      else $form_state['howmany_spouses'] = 1;
    }
    $num_of_spouses = $form_state['howmany_spouses'];

    $form['church_family_spouses'] = array(
      '#type' => 'fieldset',
      '#weight' => 100,
      '#title' => t('Spouses'),
      '#prefix' => '<div id="church-family-spouses-wrapper">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
    );


    for ($i = 1; $i <= $num_of_spouses; $i++) {

      unset($person);
      if (isset($form['#entity']->church_family_spouses[($i-1)])) {
        $person = church_people_load($form['#entity']->church_family_spouses[($i-1)]['spouse']);
      }

      $form['church_family_spouses']['spouse_'.$i] = array(
        '#type' => 'fieldset',
        '#weight' => (1 + $i),
      );
      $form['church_family_spouses']['spouse_'.$i]['church_family_spouse_person'] = array(
        '#type' => 'drupal_church_entityreference',
        '#title' => t('Spouse'),
        '#weight' => 100,
        '#era_entity_type' => 'church_people', // Mandatory.
        '#era_bundles' => FALSE,      // Optional (Any bundle by default).
        '#era_cardinality' => 1,      // Optional (1 By default).
        '#era_column' => 'title',       // Optional (label By default).

        '#default_value' => (empty($person)) ? NULL : $person->title . ' (' . $form['#entity']->church_family_spouses[($i-1)]['spouse'] . ')',
      );
      $form['church_family_spouses']['spouse_'.$i]['church_family_spouse_label'] = array(
        '#type' => 'select',
        '#title' => t('Status'),
        '#weight' => 101,
        '#options' => array(
          -1 => '--',
          CHURCH_FAMILY_MARRIED => CHURCH_FAMILY_MARRIED_LABEL,
          CHURCH_FAMILY_WIDOWED => CHURCH_FAMILY_WIDOWED_LABEL,
          CHURCH_FAMILY_DIVORCED => CHURCH_FAMILY_DIVORCED_LABEL,
          CHURCH_FAMILY_ENGAGED => CHURCH_FAMILY_ENGAGED_LABEL,
          CHURCH_FAMILY_PARTNERED => CHURCH_FAMILY_PARTNERED_LABEL,
        ),
        '#default_value' => (empty($person)) ? -1 : $form['#entity']->church_family_spouses[($i-1)]['status'],
      );
    }

    //add button
    $form['church_family_spouses']['add_spouse'] = array(
      '#type' => 'submit',
      '#value' => t('Add one more'),
      '#submit' => array('church_family_add_more_spouses_submit'),
      '#name' => 'add_more_spouse',
      '#weight' => 200,
      // See the examples in ajax_example.module for more details on the
      // properties of #ajax.
      '#ajax' => array(
        'callback' => 'church_family_add_more_spouses',
        'wrapper' => 'church-family-spouses-wrapper',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );

  }
}

function church_family_add_more_spouses_submit($form, &$form_state) {
  $form_state['howmany_spouses']++;
  $form_state['rebuild'] = TRUE;
}

function church_family_add_more_spouses($form, &$form_state) {
  return $form['church_family_spouses'];
}

function _church_people_form_family_validate(&$form, &$form_state) {

}

function _church_people_form_family_submit(&$form, &$form_state) {

  $person = $form_state['church_people'];
  $pw = entity_metadata_wrapper('church_people', $person);

  $gender = $pw->field_person_gender->value();
  $cols = array(
    'male' => 'paternal_cpid',
    'female' => 'maternal_cpid',
  );

  //clear all records
  $query = 'DELETE FROM {church_family_spouse} WHERE ' . $cols[$gender] . ' = :cpid';
  db_query($query, array(':cpid' => $pw->cpid->value()));

  foreach ($form_state['values']['church_family_spouses'] AS $spouse) {
    if (is_array($spouse) && is_array($spouse['church_family_spouse_person'])) {

      $q = db_insert('church_family_spouse');

      $query = "INSERT INTO {church_family_spouse} SET (paternal_cpid, maternal_cpid, relationship_status) VALUES (";
      if ($gender == 'male') {
        $q->fields(array(
          'paternal_cpid' => $pw->cpid->value(),
          'maternal_cpid' => $spouse['church_family_spouse_person']['entity_id'],
          'relationship_status' => $spouse['church_family_spouse_label'],
        ));
      }
      else {
        $q->fields(array(
          'paternal_cpid' => $spouse['church_family_spouse_person']['entity_id'] ,
          'maternal_cpid' => $pw->cpid->value(),
          'relationship_status' => $spouse['church_family_spouse_label'],
        ));
      }

      $q->execute();
    }
  }
}

function church_family_church_people_load(array $people) {
  foreach ($people as $cpid => $person) {
    $person->church_family_spouses = array();
    $person->church_family_children = array();

    $pw = entity_metadata_wrapper('church_people', $person);
    $person_gender = $pw->field_person_gender->value();

    $gender_fields = array(
      'male' => 'paternal_cpid',
      'female' => 'maternal_cpid',
    );
    $gender_switch = array(
      'male' => 'female',
      'female' => 'male',
    );

    if ($person_gender == 'male') {
      $spouse_result = db_query('SELECT * FROM {church_family_spouse} WHERE paternal_cpid = :cpid', array( ':cpid' => $cpid));
    } else {
      $spouse_result = db_query('SELECT * FROM {church_family_spouse} WHERE maternal_cpid = :cpid', array( ':cpid' => $cpid));
    }

    foreach ($spouse_result as $record) {
      $person->church_family_spouses[] = array(
        'spouse' => $record->{$gender_fields[$gender_switch[$person_gender]]},
        'status' => $record->relationship_status,
      );
    }

    $children_result = db_query('SELECT * FROM {church_children} WHERE parent_cpid = :cpid', array( ':cpid' => $cpid));

    foreach ($children_result as $record) {
      $person->church_family_children[] = array(
        'child' => $record->child_cpid,
      );
    }
  }
}

function church_family_church_people_presave($people) {

}

